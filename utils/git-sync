#!/bin/bash

# An unsophisticated script to sync a git repo. I use this to periodically sync
# my notes repository. There's pretty much no error checking, as this script
# is assumed to be running as a daemon on all my machines.

# Use GUI editor to prevent blocking on merges when this script is run in the
# background.
export VISUAL=gvim
export EDITOR="$VISUAL"

if [ "$#" -lt 1 ]
then
  echo "Usage: git-sync.sh <dir> <polling freq> <optional command to run on pulls>"
  exit 1
fi

dir=$1
polltime="300"
if [ "$#" -ge 2 ]
then
  polltime=$2
fi
cmd=${@:3}

cd $dir
git rev-parse

if [ "$?" -ne "0" ]; then
   echo "Not in a git repository!";
fi

first_run=true
while true; do
  if [ "$first_run" = true ] ; then
    first_run=false
  else
    timeout $polltime inotifywait $1 -e modify -e move -e move_self -e create -e delete -r --exclude "(.git)"
  fi
  # This is just a hack to prevent a burst of commits.
  sleep 60
  # TODO: Ideally, we would throttle the inotifywait to trigger sync:
  # (a) for every N file-changes, or
  # (b) every M minutes,
  # whichever happens earlier.
  git-sync-once $dir $cmd
done
