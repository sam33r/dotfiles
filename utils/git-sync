#!/bin/bash

# An unsophisticated script to sync a git repo. I use this to periodically sync
# my notes repository. There's pretty much no error checking, as this script
# is assumed to be running as a daemon on all my machines.
# TODO: Send a mail or something when things break.

# Use GUI editor to prevent blocking on merges when this script is run in the
# background.
export VISUAL=gvim
export EDITOR="$VISUAL"

if [ "$#" -lt 1 ]
then
  echo "Usage: git-sync.sh <dir> <polling freq> <optional command to run on pulls>"
  exit 1
fi

dir=$1
polltime="300"
if [ "$#" -ge 2 ]
then
  polltime=$2
fi
cmd=${@:3}

cd $dir
git rev-parse

if [ "$?" -ne "0" ]; then
   echo "Not in a git repository!";
fi

while true; do
  date
  git fetch origin
  git status | grep behind
  status=$?
  git pull origin master
  if [ "$status" -eq "0" ]; then
    $cmd
  fi
  num_changes=`git status --porcelain | wc -l`
  echo "Found $num_changes changes."
  if (( $num_changes > 0)); then
    dt=`date`
    host=`hostname`
    commit="$num_changes files changed from $host at $dt"
    git add -A; git commit -m "$commit"
    echo $commit
  fi
  num_commits=`git cherry -v origin/master | wc -l`
  echo "Found $num_commits commits to push to origin."
  if (( $num_commits > 0)); then
    git push origin master
  fi
  echo "Sleeping for $polltime seconds."
  sleep $polltime
done
