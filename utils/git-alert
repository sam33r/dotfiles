#!/bin/bash

# Alert if a git repository is out of date from remote.

if [ "$#" -lt 1 ]
then
  echo "Usage: git-alert <dir> <polling freq>"
  exit 1
fi

polltime="600"
if [ "$#" -ge 2 ]
then
  polltime=$2
fi
notifymillis=$(($polltime*1000))

cd $1

if [ "$?" -ne "0" ]; then
   echo "Not in a git repository!";
fi

while true; do

  num_changes=`git status --porcelain | wc -l`
  if (( $num_changes > 0)); then
    notify-send "$1 has $num_changes uncommitted changes!" -t $notifymillis -u normal
  fi

  # This can hang if git is waiting on credentials. The num_changes block above guards against
  # git commands in perpetual wait.
  timeout 60 git remote update
  UPSTREAM='@{u}'
  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse "$UPSTREAM")
  BASE=$(git merge-base @ "$UPSTREAM")

  if [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    notify-send "$1 is out of date, need to pull" -t $notifymillis -u normal
    echo "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
  else
    notify-send "$1 has diverged from origin/master." -t $notifymillis -u normal
    echo "Diverged"
  fi
  # Grab the timestamp of the last fetch.
  last_fetch=`stat -c %Y .git/FETCH_HEAD`
  secs_since_fetch=$((`date +"%s"` - $last_fetch))
  # If there hasn't been a fetch in the last minute or so, it means fetch
  # is broken.
  if (( $secs_since_fetch > 200 )); then
    notify-send "$1 isn't being fetched!" -t $notifymillis -u normal
  fi

  sleep $polltime
  sleep 1

done
