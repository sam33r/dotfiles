[General]
plugin_priority=itemimage, itemencrypted, itemfakevim, itemnotes, itempinned, itemsync, itemtags, itemtext, itemdata

[Commands]
1\Command="copyq:\nvar snippetsTabName = 'Snippets'\n// List snippets instead of search combo box?\nvar listSnippets = false\n\nfunction newVarRe(content) {\n  return new RegExp('\\\\${' + content + '}', 'g')\n}\n\nfunction getText(item, format) {\n  return str(item[format] || '')\n}\n\nfunction assignPlaceholder(snippet, placeholder, value) {\n  return snippet.replace(newVarRe(placeholder + ':?.*?'), value)\n}\n\nfunction fuzzyIndexOf(snippetNames, snippetName) {\n    var re = new RegExp(snippetName, 'i')\n    for (var i in snippetNames) {\n      if (snippetNames[i].match(re))\n        return i;\n    }\n    return -1\n}\n\nfunction loadSnippets(snippetNames, snippets)\n{\n  var tabs = tab()\n  for (var i in tabs) {\n    var tabName = tabs[i];\n    if (tabName != snippetsTabName && tabName.indexOf(snippetsTabName + '/') != 0)\n      continue;\n\n    tab(tabName)\n    var prefix = tabName.substring(snippetsTabName.length + 1)\n    if (prefix)\n      prefix += ': '\n    for (var j = 0; j < size(); ++j) {\n      var snippet = getitem(j)\n      var snippetName = getText(snippet, mimeItemNotes)\n          || getText(snippet, mimeText)\n          || getText(snippet, mimeHtml)\n      snippetNames.push(prefix + snippetName)\n      snippets.push(snippet)\n    }\n  }\n}\n\nfunction askForSnippet(snippetNames, snippets) {\n  var list = listSnippets ? '.list:' : ''\n  var snippet = dialog(\n    '.title', 'Select Snippet',\n    list + 'Snippet', snippetNames\n  ) || abort()\n\n  if (listSnippets)\n      return snippets[snippet]\n\n  var i = snippetNames.indexOf(snippet)\n  if (i != -1)\n    return snippets[i]\n\n  i = fuzzyIndexOf(snippetNames, snippet)\n  if (i != -1)\n    return snippets[i]\n\n  popup(\n    'Snippet Not Found',\n    'No matching snippet found for \"' + snippetName + '\"!'\n  )\n  abort()\n}\n\nfunction getPlaceholders(snippet) {\n  var placeholders = {}\n  var m\n  var reVar = newVarRe('([^:}]*):?(.*?)')\n  while ((m = reVar.exec(snippet)) !== null) {\n    if (!(m[1] in placeholders))\n      placeholders[m[1]] = m[2].replace('\\\\n', '\\n')\n  }\n\n  return placeholders\n}\n\nfunction assignPlaceholders(text, values) {\n  if (!(values instanceof Object)) {\n    text = assignPlaceholder(text, '.*?', values)\n  } else {\n    for (var name in placeholders)\n      text = assignPlaceholder(text, name, values[name])\n  }\n\n  return text\n}\n\nfunction askToAssignPlaceholders(snippet, format, values) {\n  var text = getText(snippet, format)\n  var placeholders = getPlaceholders(text)\n\n  if (Object.keys(placeholders).length < 1)\n    return\n\n  if (values) {\n    snippet[format] = assignPlaceholders(text, values)\n    return values\n  }\n\n  var label = escapeHtml(text)\n    .replace(newVarRe('([^:}]*).*?'), '<b>$1</b>')\n\n  var dialogVars = [\n    '.title', 'Set Snippet Values',\n    '.label', label\n  ]\n\n  for (var name in placeholders) {\n    var values = placeholders[name].split(',')\n    dialogVars.push(name)\n    dialogVars.push((values.length == 1) ? values[0] : values)\n  }\n\n  var values = dialog.apply(this, dialogVars) || abort()\n  snippet[format] = assignPlaceholders(text, values)\n  return values\n}\n\nfunction pasteSnippet(mime, content) {\n  copy(mime, content)\n  copySelection(mime, content)\n  paste()\n}\n\nvar snippetNames = []\nvar snippets = []\nloadSnippets(snippetNames, snippets)\n\nvar snippet = askForSnippet(snippetNames, snippets)\n\nvalues = askToAssignPlaceholders(snippet, mimeText)\naskToAssignPlaceholders(snippet, mimeHtml, values)\n\npasteSnippet(mimeItems, pack(snippet))"
1\GlobalShortcut=meta+alt+q
1\Icon=\xf1fb
1\Name=Snippets
10\Automatic=true
10\Command="copyq:\n// Imports raw commands code (starting with [Command] or [Commands])\n// or from a link ('https://github.com/**/copyq-commands/blob/**.ini').\nvar timeOutSeconds = 10\nvar rawDataUrlPrefix = 'https://raw.githubusercontent.com'\n// Don't run this when mouse selection changes.\nif ( dataFormats().indexOf(mimeClipboardMode) != -1 )\n  abort()\nfunction importCommandsFromUrl(url)\n{\n  var m = url.match(/https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*)/)\n  if (!m)\n    return;\n  var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]\n  var commandsData = str(networkGet(rawDataUrl).data)\n  if ( !commandsData.match(/^\\[Commands?\\]/) )\n    return;\n  return importCommands(commandsData);\n}\nvar cmds = importCommandsFromUrl(str(input())) || importCommands(input())\nvar list = '<ul>'\nfor (var i in cmds) {\n  var cmd = cmds[i]\n  var cmdType =\n    cmd.automatic ? 'automatic' :\n    cmd.inMenu ? 'menu/shortcut' :\n    cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';\n  list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'\n}\nlist += '</ul>'\nvar message = '<p><b>Import commands</b> from clipboard?</p>' + list\nnotification(\n  '.title', 'Commands Available',\n  '.message', message,\n  '.time', timeOutSeconds*1000,\n  '.icon', '\xf085',\n  '.id', 'CopyQ_commands_in_clipboard',\n  '.button', 'Cancel', '', '',\n  '.button', 'Import', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)\n)"
10\Icon=\xf085
10\Input=text/plain
10\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
10\Name=Notification for Copied Commands
11\Command=copyq add %1
11\Icon=\xf066
11\InMenu=true
11\Name=Join Selected Items
11\Shortcut=space
12\Command=copyq: plugins.itemencrypted.encryptItems()
12\Icon=\xf023
12\InMenu=true
12\Input=!OUTPUT
12\Name=Encrypt (needs GnuPG)
12\Output=application/x-copyq-encrypted
12\Shortcut=ctrl+l
13\Command=copyq: plugins.itemencrypted.decryptItems()
13\Icon=\xf09c
13\InMenu=true
13\Input=application/x-copyq-encrypted
13\Name=Decrypt
13\Output=application/x-copyq-item
13\Shortcut=ctrl+l
14\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
14\Icon=\xf13e
14\InMenu=true
14\Input=application/x-copyq-encrypted
14\Name=Decrypt and Copy
14\Shortcut=ctrl+shift+l
15\Command=copyq: plugins.itempinned.pinData()
15\Icon=\xf08d
15\InMenu=true
15\Input=!OUTPUT
15\Name=Pin
15\Output=application/x-copyq-item-pinned
15\Shortcut=ctrl+shift+p
16\Command=copyq: plugins.itempinned.unpinData()
16\Icon=\xf08d
16\InMenu=true
16\Input=application/x-copyq-item-pinned
16\Name=Unpin
16\Shortcut=Ctrl+Shift+P
17\Command=youtube-dl %1
17\Icon=\xf016
17\InMenu=true
17\Match=^https://www.youtube.com/watch\\?v
17\Name=Download YouTube Video
18\Automatic=true
18\Command=copyq ignore
18\Icon=\xf069
18\Name=Ignore *\"Password\"* window
18\Remove=true
18\Window=Password
19\Automatic=true
19\Icon=\xf06a
19\Input=text/plain
19\Match=^\\s*\\S?\\S?\\s*$
19\Name=Ignore items with no or upto two characters
19\Remove=true
2\Command="copyq: copy('image/png', screenshotSelect())"
2\GlobalShortcut=ctrl+print
2\Icon=\xf083
2\Name=Screenshot Cutout
20\Automatic=true
20\Command="copyq:\nvar time = dateString('yyyy-MM-dd hh:mm:ss')\nsetData('application/x-copyq-user-copy-time', time)\n\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + time\nsetData(tagsMime, tags)"
20\Icon=\xf017
20\Name=Store Copy Time
21\Automatic=true
21\Command="copyq:\nvar window = str(data('application/x-copyq-owner-window-title'))\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + window\nsetData(tagsMime, tags)"
21\Icon=\xf009
21\Name=Store Window Title
22\Command="copyq:\nvar shortcut = str(data(\"application/x-copyq-shortcut\"))\nvar number = shortcut ? shortcut.replace(/^\\D+/g, '') : currentItem();\nselectItems(number)\ncopy(\"application/x-copyq-item\", pack(getItem(number)))"
22\HideWindow=true
22\Icon=\xf0cb
22\InMenu=true
22\Name=Copy Nth Item
22\Shortcut=ctrl+1, ctrl+2, ctrl+3, ctrl+4, ctrl+5, ctrl+6, ctrl+7, ctrl+8, ctrl+9, ctrl+0
23\Command="copyq:\nseconds = 10;\npopup(\"\", clipboard(), seconds * 1000)"
23\GlobalShortcut=meta+alt+c
23\Name=Show clipboard
24\Command="copyq:\n    edit()\n    //var text = dialog('paste', str(clipboard()))\n    //if (text) {\n      //copy(text)\n      //copySelection(text)\n      paste()\n    //}"
24\GlobalShortcut=ctrl+alt+v
24\Icon=\xf016
24\Name=Edit and paste
25\Command=copyq open %1
25\HideWindow=true
25\Icon=\xf0ac
25\InMenu=true
25\Match=^(https?|ftps?|file)://
25\Name=Open in &Browser
25\Shortcut=v
26\Command="copyq: \n// http://doc.qt.io/qt-5/qdatetime.html#toString\nvar format = 'dddd, MMMM d, yyyy h:mm:ss AP t '\nvar dateTime = dateString(format)\ncopy(dateTime)\npaste()\n"
26\GlobalShortcut=ctrl+shift+1
26\Icon=\xf017
26\Name=Paste current date and time
27\Automatic=true
27\Icon=\xf016
27\Input=image/png
27\Name=copy images to image tab
27\Tab=&images
28\Automatic=true
28\Icon=\xf0c5
28\Match=^(https?|ftps?|file)://
28\Name=Copy URL (web address) to other tab
28\Tab=&urls
3\Command="copyq: copy('image/png', screenshot())"
3\GlobalShortcut=print
3\Icon=\xf083
3\Name=Screenshot
4\Automatic=true
4\Command="copyq:\nfunction lower(data) {\n  return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n  reply.data // fetches data and headers\n  var headers = reply.headers\n  for (var i in headers) {\n    var header = headers[i]\n    if (lower(header[0]) === headerName)\n       return header[1]\n  }\n  return ''\n}\n\nfunction isHtml(reply) {\n  var header = findHeader(reply, 'content-type')\n  if (header)\n    return lower(header).indexOf(mimeHtml) === 0\n  return false\n}\n\nfunction fetchContent(url, maxRedirects) {\n  if (maxRedirects === undefined)\n    maxRedirects = 4\n\n  var reply = networkGet(url)\n  if (maxRedirects == 0)\n    return reply\n  var header = findHeader(reply, 'location')\n  if (header)\n    return fetchContent(header, maxRedirects - 1)\n\n  return reply\n}\n\nfunction grep(content, re) {\n  return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n  var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n  return title ? title.trim() : ''\n}\n\nfunction getFavicon(content) {\n  var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n  var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n  if (!icon)\n    return ''\n\n  // Icon path can be complete URL.\n  if (icon.indexOf('://') != -1)\n    return fetchContent(icon).data\n\n  // Icon path can be missing protocol.\n  if (icon.substr(0, 2) === '//') {\n    var i = url.search(/\\/\\//)\n    var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n    return fetchContent(protocol + icon).data\n  }\n\n  // Icon path can be relative to host URL.\n  if (icon[0] === '/') {\n    var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n    return fetchContent(baseUrl + icon).data\n  }\n\n  // Icon path can be relative to current URL.\n  var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n  return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n  abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (isHtml(reply)) {\n  var content = str(reply.data)\n  var title = getTitle(content)\n  var icon = getFavicon(content)\n\n  setData(mimeItemNotes, title || '')\n  setData('application/x-copyq-item-icon', icon)\n\n  htmlContent = \"<a href='\" + url + \"'>\" + title + \"</a>\"\n  setData(mimeHtml, htmlContent)\n}"
4\Icon=\xf0c1
4\Input=text/plain
4\Match=^https?://
4\Name=Tab for URLs with Title and Icon
4\Tab=&urls
5\Automatic=true
5\Command="copyq:\nvar tabName = 'Selections'\nsetData(mimeOutputTab, tabName)"
5\Icon=\xf245
5\MatchCommand="copyq: dataFormats().indexOf(mimeClipboardMode) == -1 && fail()"
5\Name=Store Mouse Selections in Separate Tab
6\Command="copyq:\n// Name for tab for storing matching items.\nvar search_tab_name = \"Search\"\n\n// Returns true iff item at index matches regex.\nfunction item_matches(item_index, re)\n{\n    var item = getitem(j)\n    var note = str(item[mimeItemNotes])\n    var text = str(item[mimeText])\n    return text && (re.test(text) || re.test(note))\n}\n\n// Ask for search expression.\nvar match = dialog(\"Search\")\nif (!match)\n  abort()\nvar re = new RegExp(match,'i') // 'i' case-insensitive\n\n// Clear tab with results.\ntry {\n  removeTab(search_tab_name)\n} catch (e) {}\n\n// Search all tabs.\nvar tab_names = tab()\nfor (var i in tab_names) {\n  var tab_name = tab_names[i]\n  tab(tab_name)\n  var item_count = count()\n\n  // Search all items in tab.\n  for (var j = 0; j < item_count; ++j) {\n    // Add matching item to tab with results.\n    if (item_matches(j, re)) {\n      var item = getItem(j)\n      tab(search_tab_name)\n      setItem(j, item)\n      tab(tab_name)\n    }\n  }\n}\n\nshow(search_tab_name)"
6\Icon=\xf002
6\InMenu=true
6\Name=Search All Tabs
6\Shortcut=ctrl+shift+f
7\Command="copyq:\ntab_name = \"Frequent\"\n\nsource = selectedtab()\ntab(source)\nitems = selecteditems()\np = \"application/x-copyq-\"\nfreq_mime = p + \"user-frequency\"\nignored = [\n    freq_mime,\n    p + \"owner\",\n    p + \"owner-window-title\",\n]\n\nfunction items_equal(item, i) {\n    for (var mime in item) {\n        if ( str(read(mime, i)) !== str(item[mime]) )\n            return false\n    }\n    return true\n}\n\nfunction index_of_item(item) {\n    for (var i = 0; i < size(); ++i) {\n      if (items_equal(item, i))\n          return i\n    }\n    return -1\n}\n\nfunction get_freq(i) {\n    return parseInt(str(read(freq_mime, i))) || 0\n}\n\nfunction find_index_for_frequency(freq) {\n    for (var i = 0; i < size(); ++i) {\n      if (freq >= get_freq(i))\n          return i\n    }\n    return size()\n}\n\nfor (i in items) {\n    item = getitem(items[i])\n    for (j in ignored)\n        delete item[ignored[j]];\n    tab(tab_name)\n    j = index_of_item(item)\n    if (j !== -1) {\n        item[freq_mime] = freq = get_freq(j) + 1\n        remove(j)\n        j = find_index_for_frequency(freq)\n    } else {\n        j = size()\n    }\n    setitem(j, item)\n    tab(source)\n}\n\nselect(items)\n\ntab(tab_name)\nselectitems([0])\n\nif ( config(\"activate_closes\") == \"true\" ) hide()\nif ( config(\"activate_pastes\") == \"true\" ) paste()"
7\Icon=\xf004
7\InMenu=true
7\Name=Activate and Add to Frequent
7\Shortcut=return, enter
8\Command=copyq menu \"Frequent\"
8\Icon=\xf004
8\Name=Show Frequent
9\Command="copyq:\nvar editor = config('editor')\n\nvar fileName = str(input())\n  .replace(/^\\/([a-zA-Z])\\//, '$1:/')\n  .replace(/^file:\\/\\//, '')\n\nhide()\nexecute(editor, fileName)"
9\Icon=\xf040
9\InMenu=true
9\Input=text/plain
9\Match=^([a-zA-Z]:[\\\\/]|~|file://|%\\w+%|$\\w+|/)
9\Name=Edit File
9\Shortcut=f4
size=28

[Options]
action_has_input=false
action_has_output=false
action_output_tab=
action_separator=\\n
activate_closes=true
activate_focuses=false
activate_pastes=true
always_on_top=true
autocompletion=true
autostart=false
check_clipboard=true
check_selection=true
clipboard_notification_lines=3
clipboard_tab=&clipboard
command_history_size=100
confirm_exit=true
copy_clipboard=true
copy_selection=false
disable_tray=false
edit_ctrl_return=true
editor=emacsclient -c %1
expire_tab=0
hide_main_window=false
hide_tabs=false
hide_toolbar=false
hide_toolbar_labels=false
item_popup_interval=1
language=en
maxitems=2000
move=true
notification_horizontal_offset=10
notification_maximum_height=100
notification_maximum_width=300
notification_position=3
notification_vertical_offset=10
open_windows_on_current_screen=true
save_filter_history=true
show_advanced_command_settings=true
show_simple_items=false
show_tab_item_count=true
tab_tree=true
tabs=&clipboard, &urls, &images, &zsh, &journal, &later, &projects, Snippets, Frequent, Search, Selections, &url, &snippets, &tmp, &history
text_wrap=true
transparency=0
transparency_focused=0
tray_commands=true
tray_images=true
tray_item_paste=true
tray_items=5
tray_tab=
tray_tab_is_current=true
vi=true

[Plugins]
itemdata\enabled=true
itemdata\formats=text/uri-list, text/xml
itemdata\max_bytes=256
itemencrypted\enabled=true
itemencrypted\encrypt_tabs=&clipboard, &journal
itemfakevim\enabled=true
itemfakevim\really_enable=true
itemfakevim\source_file=
itemimage\enabled=true
itemimage\image_editor=
itemimage\max_image_height=240
itemimage\max_image_width=320
itemimage\svg_editor=
itemnotes\enabled=true
itemnotes\icon_only=false
itemnotes\notes_at_bottom=false
itemnotes\show_tooltip=false
itempinned\enabled=true
itemsync\enabled=false
itemsync\format_settings=@Invalid()
itemsync\sync_tabs=@Invalid()
itemtags\enabled=true
itemtags\tags=@Invalid()
itemtext\enabled=true
itemtext\max_height=0
itemtext\max_lines=0
itemtext\use_rich_text=true

[Shortcuts]
about=shift+f1
change_tab_icon=ctrl+shift+t
commands=f6
copy_selected_items=ctrl+c
delete_item=del
edit=ctrl+e
edit_notes=ctrl+shift+e
editor=ctrl+alt+shift+e
exit=ctrl+q
export=ctrl+s
find_items=f3
format-next=ctrl+right
format-previous=ctrl+left
help=f1
import=ctrl+i
move_down=ctrl+down
move_to_bottom=ctrl+end
move_to_clipboard=
move_to_top=ctrl+home
move_up=ctrl+up
new=ctrl+n
new_tab=ctrl+t
next_tab=right
paste_selected_items=ctrl+v
preferences=ctrl+p
previous_tab=left
process_manager=ctrl+shift+z
remove_tab=ctrl+w
rename_tab=ctrl+f2
reverse_selected_items=ctrl+shift+r
show-log=f12
show_clipboard_content=ctrl+shift+c
show_item_content=f4
show_item_preview=f7
sort_selected_items=ctrl+shift+s
system-run=f5
toggle_clipboard_storing=ctrl+shift+x

[Theme]
alt_bg=bg
alt_item_css="\n    ;border-radius: 2px\n    ;background: qlineargradient(\n        x1: 0, y1: 0,\n        x2: 1.5, y2: 0,\n        stop: 0 ${alt_bg - #100c0a},\n        stop: 1 ${alt_bg}\n        )\n    "
bg=#f7f7f7
css=ClipboardBrowser::selected:item{outline:0px}
cur_item_css="\n    ;border: 0.1em solid ${sel_bg}"
edit_bg=bg
edit_fg=#131313
edit_font="Input,12,-1,5,50,0,0,0,0,0"
fg=#242424
find_bg="rgba(0,0,0,0)"
find_fg=#565656
find_font="Input,12,-1,5,75,0,1,0,0,0"
font="Input,12,-1,5,50,0,0,0,0,0"
font_antialiasing=true
item_css=padding:1em
item_spacing=
menu_bar_css="\n    ;background: ${bg}\n    ;color: ${fg}"
menu_bar_disabled_css="\n    ;color: ${bg - #666}"
menu_bar_selected_css="\n    ;background: ${sel_bg}\n    ;color: ${sel_fg}"
menu_css="\n    ;border-top: 0.08em solid ${bg + #333}\n    ;border-left: 0.08em solid ${bg + #333}\n    ;border-bottom: 0.08em solid ${bg - #333}\n    ;border-right: 0.08em solid ${bg - #333}"
notes_bg=bg
notes_css=
notes_fg=#222222
notes_font="Serif,11,-1,5,50,1,0,0,0,0"
notification_bg=#333333
notification_fg=#ddd
notification_font="Sans Serif,12,-1,5,50,0,0,0,0,0"
num_fg=#757575
num_font="Sans Serif,9,-1,5,50,0,0,0,0,0"
search_bar="\n    ;background: ${edit_bg}\n    ;color: ${edit_fg}\n    ;border: 1px solid ${alt_bg}\n    ;margin: 2px"
search_bar_focused="\n    ;border: 1px solid ${sel_bg}"
sel_bg=#bcbcbc
sel_fg=#000000
sel_item_css="\n    ;border: 1px solid ${bg - #940}\n    ;border-radius: 2px\n    ;background: qlineargradient(\n        x1: 0, y1: 0,\n        x2: 1.5, y2: 0,\n        stop: 0 ${sel_bg},\n        stop: 1 ${bg}\n        )\n    "
show_number=true
show_scrollbars=false
style_main_window=true
tab_bar_css="\n    ;background: ${bg - #222}"
tab_bar_item_counter="\n    ;color: ${fg - #044 + #400}\n    ;font-size: 6pt"
tab_bar_scroll_buttons_css="\n    ;background: ${bg - #222}\n    ;color: ${fg}\n    ;border: 0"
tab_bar_sel_item_counter="\n    ;color: ${sel_bg - #044 + #400}"
tab_bar_tab_selected_css="\n    ;padding: 0.5em\n    ;background: ${bg}\n    ;border: 0.05em solid ${bg}\n    ;color: ${fg}"
tab_bar_tab_unselected_css="\n    ;border: 0.05em solid ${bg}\n    ;padding: 0.5em\n    ;background: ${bg - #222}\n    ;color: ${fg - #333}"
tab_tree_css="\n    ;color: ${fg}\n    ;background-color: ${bg}"
tab_tree_item_counter="\n    ;color: ${fg - #044 + #400}\n    ;font-size: 6pt"
tab_tree_sel_item_counter="\n    ;color: ${sel_fg - #044 + #400}"
tab_tree_sel_item_css="\n    ;color: ${sel_fg}\n    ;background-color: ${sel_bg}\n    ;border-radius: 2px"
tool_bar_css="\n    ;color: ${fg}\n    ;background-color: ${bg}\n    ;border: 0"
tool_button_css="\n    ;background-color: transparent"
tool_button_selected_css="\n    ;background: ${sel_bg}\n    ;color: ${sel_fg}"
use_system_icons=false
